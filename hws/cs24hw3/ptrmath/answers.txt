Answers for the "Arrays, Pointer Arithmetic, and Structs" section of CS24 HW3:

1) Here is some C code:

char *p = malloc(16);            /* Allocates 16 bytes  */
bzero(p, 16);                    /* Sets all bytes to 0 */

*((int *) (p + 3)) = 0xDEADBEEF;

*(((int *) p) + 3) = 0xCAFEBABE;

After bzero, we have that p points to
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
where each 00 represents a byte in hex.

(int *) (p + 3) gives us a pointer
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
         ^
to this integer. Then we set the value of that
integer to 0xDEADBEEF. This gives us
00 00 00 EF BE AD DE 00 00 00 00 00 00 00 00 00
because we are on a little-endian system.

*(((int *) p) + 3) gives us a pointer
00 00 00 EF BE AD DE 00 00 00 00 00 00 00 00 00
                                    ^
to this integer. Then we set the value of that
integer to 0xCAFEBABE. This gives us
00 00 00 EF BE AD DE 00 00 00 00 00 BE BA FE CA


2) Here is a C struct declaration:

typedef struct entry {
    int id;             // Offset: 0 bytes   Size: 4 bytes
    char code[5];       // Offset: 4 bytes   Size: 5 bytes
    struct entry* next; // Offset: 12 bytes  Size: 4 bytes
} entry;

Scratch Work (01 means the 01st 4 byte cell):
00: int id (4 bytes, takes up one spaces)
01: char code[5] (5 bytes, takes up two spaces)
03: struct entry* next (4 bytes b/c 32 bit machine, takes up one space);

Total size of struct = 16 bytes
Unused bytes = 3 bytes (code[5] takes up 8 byte space, only uses 5 bytes)

3) Here is some C code using the previous struct declaration:

entry *arr = malloc(10 * sizeof(entry));
char *p = (char *) arr;  /* arr and p hold the same address */
arr[4].code[3] = 'A';
p[offset] = 'A';


arr[4]
brings us to the fifth entry. Since each entry is 16 bytes, this brings
us 16 * 4 = 64 bytes forward.

code[3]
brings us to the fourth char. Since one char is one byte, and since code has an
offset of 4 bytes, this brings us
4 + 3 * 1 = 7 more bytes forward. So overall, we have moved

64 + 7 = 71 bytes forward.

So, we have that if
offset = 71,
the last two lines of code will write the same byte.
