a)

The first thing the H tries to do is to acquire the lock on R. What happens
after this is the following. L is already running, and has a lock on R. This
means that when H tries to acquire the lock on R, it will fail, because
L already has that lock. In other words, H cannot run. But the only other
process that is ready is M. This means that the scheduler will stop L and run
M ahead of H (it will run M even though L is already running b/c M is ready
and is of higher priority). The problem here is that since L is stopped, it
never releases its lock on L, which means that H cannot obtain it and cannot
run. Thus, H is now stuck behind M, and will only be allowed to run after
M has completed (which takes a very long time). Moreover, H is also stuck behind
L. Once M finishes, L still holds the lock on R. So when the scheduler is trying
to schedule between H and L, it will try to run H; however, H still cannot run
because it cannot acquire the lock on R. So the scheduler is forced to run L
because there are no higher priority processes available to run. Then, L will
run until it releases the lock on R, at which point H will finally get to run.
This is why this is called a "priority inversion"; even though H is of the
highest priority, it runs after both M and L.

b)

Given this priority inversion issue, the high-priority process would have been
pushed back behind the LONG running medium-priority process. And since the
high-priority process was responsible for resetting the watchdog timer, this
timer most likely kept overflowing, as the high-priority process was not allowed
to run often enough to reset it. Thus, the Mars rover probably kept on getting
reset, which would have greatly hampered exploration/measurements/etc.

c)

This approach solves the problem in the following way. When H tries to acquire
the lock on R, it will fail, just as before. But now, it will donate its
priority to L. So now the currently running process L has a falsely high
priority. This means that process M will not supersede it, because L's priority
is temporarily higher. L will just keep running until it releases resource
R, at which point H can acquire the lock and start running (and L will get back
its original priority). So this way, process H is not stuck behind the long
running process M.

d)

===== THE SCENARIO =====

H and L need R1
MH and ML need R2

L is running, locks R1

H, MH, ML become ready.

H needs R1, so MH starts running, locks R2. L is stopped, R1 remains locked.

MH runs to completion since everything else needs R1 or is of lower priority.
R2 is unlocked.

After MH finishes, ML starts running (and locks R2) since everything else needs
R1 or is of lower priority. And for that same reason, ML runs to completion (and
unlocks R2).

After ML finishes, L runs until it releases R1. Then, H can acquire R1
and finally start running. We can see that this is priority inversion because
the high priority process runs after all the lower priority processes.

===== THE SOLUTION APPROACH =====

The working solution would look something like follows:

L is running, locks R1

H, MH, ML become ready.

H attemps to lock R1, but L already holds it. L's priority temporarily switches
to H.

L runs until it releases R1. Then, L's priority switches back to L.

Now H is free to run, locking R1 as it does.

After H finishes (and unlocks R1), MH will run and lock R2. It will run to
completion, unlocking R2 upon finishing.

After MH finishes, ML will run and lock R2. It will run to completion, unlocking
R2 upon finishing.

Finally, L will finish running (if it hasn't already).

So in the scenario I have defined, all we really need is the original priority
donation. In other words, the solution defined below works just fine:

If a process P1 attempts to lock a resource that another process P2 already
holds, and P1’s priority is higher than P2’s, the system can temporarily donate
P1’s priority to P2, until P2 releases the resource that P1 requires. At that
point, P2’s priority is lowered back to its original priority.

because that is exactly what happens in the above scenario, with L and H being
the low and high priority processes.

e)

In the context of such deadlocks, priority donation runs into an issue. The
issue is the following. In priority donation, a process gets a temporarily
high priority until it releases the resource of interest. However, in the
context of these deadlocks, the resource of interest will never be released,
because the process is deadlocked. So now we have a deadlocked process that
has a falsely high priority. This is bad because the scheduler can only switch
it out for a process of higher priority, and we just made the processes priority
falsely higher. So we could be deadlocked for a very long time.

To fix this issue, instead of just switching the processes priority, we can
keep track of two priorities: the original priority and the temporary priority.
Then, if a process ever becomes deadlocked, we can tell the scheduler to use
the original priority instead of the temporary priority when trying to schedule
new ready processes. Or, to actually fix the deadlock, we could make it so that
acquiring locks on both resources is atomic; that is, whenever a process needs
to acquire locks on R1 and R2, it acquires both of them at once.
