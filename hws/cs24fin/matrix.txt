===== Problem 1 ======

For memory accesses to src, the stride is 1.
For memory accesses to dst, the stride is SIZE.

===== Problem 2 ======

We are working with 64 cache sets and 64-byte blocks. So each 32-bit address has

6 bits to specify block offset (marked by b)
6 bits to specify the set index (marked by s)
20 bits to specify the block's tag (marked by t)

So, if the set is the same but the block is different, we have the following
minimal scenario:

00000000000000000001000000000000 // block 1, set 0, offset 0
00000000000000000000000000111111 // block 0, set 0, offset 63
^                   ^     ^
t                   s     b

So we have that the integer difference is

4096 - 63 = 4033

and that the overall distance (inclusive) between set bits is 8 bits = 1 byte.

===== Problem 3 ======

In the worst case, we will only be able to cache 8 values for dst, because
the inner loop will keep bringing us to the same cache set. We have that each
jump of the inner loop jumps SIZE * 4 bytes in memory, and since each cache
block is basically 1 byte away from the next (address wise), and we have 64
cache sets with 8 blocks each, we have that the minimum value for SIZE should
be 128. The math there was

8 blocks per cache set * 1 byte distance for cache blocks = 8 bytes for a set
64 cache sets * 8 bytes for a set = 512 bytes
512 bytes / 4 bytes = 128
